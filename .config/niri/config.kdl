// Animation settings.

output "HDMI-A-1" {
    // off
    mode "2560x1080@100"
    scale 1.0
    // transform "90"
    // background-color "#003300"
}

// animations {
//     // Uncomment to turn off all animations.
//     // off
//
//     // Slow down all animations by this factor. Values below 1 speed them up instead.
//     // slowdown 3.0
// }


animations {
    // off
    // slowdown 100.0
    // slowdown 10.0
    // slowdown 4.0
    // slowdown 3.0
    // slowdown 2.0
    slowdown 1.5

    workspace-switch {
        // off
        duration-ms 300
        curve "linear"
        // spring damping-ratio=1.0 stiffness=1000 epsilon=0.0001
    }

    window-open {
        // off
        // duration-ms 2500
        // curve "ease-out-expo"
        spring damping-ratio=0.8 stiffness=1000 epsilon=0.0001
        // duration-ms 1000
        // curve "linear"

        custom-shader r"
            vec4 open_color(vec3 coords_geo, vec3 size_geo) {
                vec3 coords_tex = niri_geo_to_tex * coords_geo;
                vec4 color = texture2D(niri_tex, coords_tex.st);

                vec2 coords = (coords_geo.xy - vec2(0.5, 0.5)) * size_geo.xy * 2.0;
                coords = coords / length(size_geo.xy);
                float p = niri_clamped_progress;
                if (p * p <= dot(coords, coords))
                    color = vec4(0.0);

                return color;
            }
        "

        /-custom-shader r"
            vec4 open_color(vec3 coords_geo, vec3 size_geo) {
                vec3 coords_tex = niri_geo_to_tex * coords_geo;
                vec4 color = texture2D(niri_tex, coords_tex.st);

                return color;
            }
        "
    }

    window-close {
        // off
        // duration-ms 2500
        // duration-ms 1000
        duration-ms 100
        curve "linear"
        // spring damping-ratio=0.8 stiffness=1000 epsilon=0.0001

        /-custom-shader r"
            mat2 rotate(float angle) {
                return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));
            }

            vec4 close_color(vec3 coords_geo, vec3 size_geo) {
                float progress = niri_clamped_progress * niri_clamped_progress;

                vec2 coords = (coords_geo.xy - vec2(0.5, 1.0)) * size_geo.xy;

                coords.y -= progress * 200.0;

                float random = (niri_random_seed - 0.5) / 2.0;
                random = sign(random) - random;
                float max_angle = 0.05 * random;

                float angle = progress * max_angle;
                coords = rotate(angle) * coords;

                coords_geo = vec3(coords / size_geo.xy + vec2(0.5, 1.0), 1.0);

                vec3 coords_tex = niri_geo_to_tex * coords_geo;
                vec4 color = texture2D(niri_tex, coords_tex.st);

                return color * (1.0 - niri_clamped_progress);
            }
        "

        /-custom-shader r"
            vec4 close_color(vec3 coords_geo, vec3 size_geo) {
                vec3 coords_tex = niri_geo_to_tex * coords_geo;
                vec4 color = texture2D(niri_tex, coords_tex.st);

                return color;
            }
        "
    }

    horizontal-view-movement {
        // off
        duration-ms 100
        curve "linear"
        // spring damping-ratio=1.0 stiffness=20 epsilon=0.00001
        // spring damping-ratio=10.0 stiffness=800 epsilon=0.0001
    }

    window-movement {
        // off
        // duration-ms 750
        curve "ease-out-cubic"
        // spring damping-ratio=1.0 stiffness=20 epsilon=0.00001
        // spring damping-ratio=0.2 stiffness=800 epsilon=0.0001
    }

    window-resize {
        // off
        duration-ms 200
        // duration-ms 2500
        curve "linear"
        // spring damping-ratio=0.2 stiffness=800 epsilon=0.0001

        custom-shader r"
            vec4 resize_color(vec3 coords_curr_geo, vec3 size_curr_geo) {
                vec3 coords_next_geo = niri_curr_geo_to_next_geo * coords_curr_geo;
                vec3 coords_prev_geo = niri_curr_geo_to_prev_geo * coords_curr_geo;

                vec3 coords_crop = niri_geo_to_tex_next * coords_next_geo;
                vec3 coords_stretch = niri_geo_to_tex_next * coords_curr_geo;
                vec3 coords_stretch_prev = niri_geo_to_tex_prev * coords_curr_geo;

                // We can crop if the current window size is smaller than the next window
                // size. One way to tell is by comparing to 1.0 the X and Y scaling
                // coefficients in the current-to-next transformation matrix.
                bool can_crop_by_x = niri_curr_geo_to_next_geo[0][0] <= 1.0;
                bool can_crop_by_y = niri_curr_geo_to_next_geo[1][1] <= 1.0;
                bool crop = can_crop_by_x && can_crop_by_y;

                vec4 color;

                if (crop) {
                    // However, when we crop, we also want to crop out anything outside the
                    // current geometry. This is because the area of the shader is unspecified
                    // and usually bigger than the current geometry, so if we don't fill pixels
                    // outside with transparency, the texture will leak out.
                    //
                    // When stretching, this is not an issue because the area outside will
                    // correspond to client-side decoration shadows, which are already supposed
                    // to be outside.
                    if (coords_curr_geo.x < 0.0 || 1.0 < coords_curr_geo.x ||
                            coords_curr_geo.y < 0.0 || 1.0 < coords_curr_geo.y) {
                        color = vec4(0.0);
                    } else {
                        color = texture2D(niri_tex_next, coords_crop.st);
                        // color = texture2D(niri_tex_prev, (niri_geo_to_tex_prev * coords_prev_geo).st);
                    }
                } else {
                    // If we can't crop, then crossfade.
                    color = texture2D(niri_tex_next, coords_stretch.st);
                    vec4 color_prev = texture2D(niri_tex_prev, coords_stretch_prev.st);
                    color = mix(color_prev, color, niri_clamped_progress);
                }

                return color;
            }
        "
    }

    config-notification-open-close {
        // off
        // duration-ms 250
        // curve "ease-out-cubic"
        // spring damping-ratio=0.1 stiffness=1000 epsilon=0.001
    }

    /-screenshot-ui-open {
        // off
        // duration-ms 200
        // curve "ease-out-quad"
    }
}


binds {
    // Mod-Shift-/, which is usually the same as Mod-?,
    // shows a list of important hotkeys.
    Mod+Shift+Slash { show-hotkey-overlay; }

    // Suggested binds for running programs: terminal, app launcher, screen locker.
    // Mod+RETURN { spawn "kitty"; }
    Mod+RETURN { spawn "bash" "-c" "exec kitty -c ~/.config/kitty/kitty-niri.conf"; }    
    Mod+W { spawn "firefox"; }
    Mod+D { spawn "anyrun"; }
    Mod+E { spawn "neovide"; }
    Super+Alt+L { spawn "swaylock"; }

    // Shell scripts execs
    Mod+B { spawn "bash" "-c" "waybar"; }    
    Mod+Shift+B { spawn "bash" "-c" "pkill waybar"; }
    Mod+M { spawn "bash" "-c" "exec ~/.scripts/wlogout.sh"; }    
    Mod+Shift+Z { spawn "bash" "-c" "exec ~/.scripts/toggle.sh"; }    

    // Audio controls bindings 
    // XF86AudioRaiseVolume { spawn "bash" "-c" "exec ~/.scripts/swayosd.sh raise"; }
    // XF86AudioLowerVolume { spawn "bash" "-c" "exec ~/.scripts/swayosd.sh lower"; }
    // XF86AudioMute { spawn "bash" "-c" "exec ~/.scripts/swayosd.sh mute"; }
    // XF86AudioMicMute { spawn "bash" "-c" "exec ~/.scripts/swayosd.sh micmute"; }
    // XF86MonBrightnessUp { spawn "bash" "-c" "exec ~/.scripts/swayosd.sh brightness_up"; }
    // XF86MonBrightnessDown { spawn "bash" "-c" "exec ~/.scripts/swayosd.sh brightness_down"; }

    // XF86AudioLowerVolume { spawn "swayosd-client" "--output-volume" "lower"; }
    // XF86AudioMute { spawn "swayosd-client" "--output-volume" "mute-toggle"; }
    // XF86AudioRaiseVolume { spawn "swayosd-client" "--output-volume" "raise"; }
    // XF86MonBrightnessDown { spawn "swayosd-client" "--brightness" "lower"; }
    // XF86MonBrightnessUp { spawn "swayosd-client" "--brightness" "raise"; }

    // Close Active window
    Mod+C { close-window; }

    // Move focus between columns
    Mod+H { focus-column-left; }
    Mod+Down { focus-window-down; }
    Mod+Up { focus-window-up; }
    Mod+L { focus-column-right; }

    // Move entire column
    Mod+Ctrl+H  { move-column-left; }
    Mod+Ctrl+J  { move-window-down; }
    Mod+Ctrl+K    { move-window-up; }
    Mod+Ctrl+L { move-column-right; }
    // Mod+Ctrl+H  { move-column-left; }
    // Mod+Ctrl+J  { move-window-down; }
    // Mod+Ctrl+K    { move-window-up; }
    // Mod+Ctrl+L { move-column-right; }
  
    // Alternative commands that move across workspaces when reaching
    // the first or last window in a column.
    // Mod+J     { focus-window-or-workspace-down; }
    // Mod+K     { focus-window-or-workspace-up; }
    // Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
    // Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    Mod+Shift+Left  { focus-monitor-left; }
    Mod+Shift+Down  { focus-monitor-down; }
    Mod+Shift+Up    { focus-monitor-up; }
    Mod+Shift+Right { focus-monitor-right; }
    // Mod+Shift+H  { focus-monitor-left; }
    // Mod+Shift+J  { focus-monitor-down; }
    // Mod+Shift+K    { focus-monitor-up; }
    // Mod+Shift+L { focus-monitor-right; }
   
    Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    // Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    // Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    // Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    // Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }
    // ...

    // And you can also move a whole workspace to another monitor:
    // Mod+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }
    // ...

    Mod+J              { focus-workspace-down; }
    Mod+K              { focus-workspace-up; }
    Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
    Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
    Mod+Ctrl+U         { move-column-to-workspace-down; }
    Mod+Ctrl+I         { move-column-to-workspace-up; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+Page_Down { move-window-to-workspace-down; }
    // ...

    Mod+Shift+Page_Down { move-workspace-down; }
    Mod+Shift+Page_Up   { move-workspace-up; }
    Mod+Shift+U         { move-workspace-down; }
    Mod+Shift+I         { move-workspace-up; }

    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Ctrl+WheelScrollRight { move-column-right; }
    Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    // Usually scrolling up and down with Shift in applications results in
    // horizontal scrolling; these binds replicate that.
    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    // Focus workspace
    Mod+1 { spawn "~/.config/niri/.scripts/exec_and_signal.sh" "focus-workspace 1"; }
    Mod+2 { spawn "~/.config/niri/.scripts/exec_and_signal.sh" "focus-workspace 2"; }
    Mod+3 { spawn "~/.config/niri/.scripts/exec_and_signal.sh" "focus-workspace 3"; }
    Mod+4 { spawn "~/.config/niri/.scripts/exec_and_signal.sh" "focus-workspace 4"; }
    Mod+5 { spawn "~/.config/niri/.scripts/exec_and_signal.sh" "focus-workspace 5"; }
    Mod+6 { spawn "~/.config/niri/.scripts/exec_and_signal.sh" "focus-workspace 6"; }
    Mod+7 { spawn "~/.config/niri/.scripts/exec_and_signal.sh" "focus-workspace 7"; }
    Mod+8 {  spawn "~/.config/niri/.scripts/exec_and_signal.sh" "focus-workspace 8"; }
    Mod+9 {  spawn "~/.config/niri/.scripts/exec_and_signal.sh" "focus-workspace 9"; }

    // Move column to workspace
    Mod+Shift+1 { spawn "~/.config/niri/.scripts/exec_and_signal.sh" "move-column-to-workspace 1" "focus-workspace 1"; }
    Mod+Shift+2 { spawn "~/.config/niri/.scripts/exec_and_signal.sh" "move-column-to-workspace 2" "focus-workspace 2"; }
    Mod+Shift+3 { spawn "~/.config/niri/.scripts/exec_and_signal.sh" "move-column-to-workspace 3" "focus-workspace 3"; }
    Mod+Shift+4 { spawn "~/.config/niri/.scripts/exec_and_signal.sh" "move-column-to-workspace 4" "focus-workspace 4"; }
    Mod+Shift+5 { spawn "~/.config/niri/.scripts/exec_and_signal.sh" "move-column-to-workspace 5" "focus-workspace 5"; }
    Mod+Shift+6 { spawn "~/.config/niri/.scripts/exec_and_signal.sh" "move-column-to-workspace 6" "focus-workspace 6"; }
    Mod+Shift+7 { spawn "~/.config/niri/.scripts/exec_and_signal.sh" "move-column-to-workspace 7" "focus-workspace 7"; }
    Mod+Shift+8 { spawn "~/.config/niri/.scripts/exec_and_signal.sh" "move-column-to-workspace 8" "focus-workspace 8"; }
    Mod+Shift+9 { spawn "~/.config/niri/.scripts/exec_and_signal.sh" "move-column-to-workspace 9" "focus-workspace 9"; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+1 { move-window-to-workspace 1; }

    // Switches focus between the current and the previous workspace.
    // Mod+Tab { focus-workspace-previous; }

    Mod+Comma  { consume-window-into-column; }
    Mod+Period { expel-window-from-column; }

    // There are also commands that consume or expel a single window to the side.
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { reset-window-height; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    Mod+S { center-column; }

    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    // Finer height adjustments when in column with other windows.
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    // Actions to switch layouts.
    // Note: if you uncomment these, make sure you do NOT have
    // a matching layout switch hotkey configured in xkb options above.
    // Having both at once on the same hotkey will break the switching,
    // since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
    Mod+Space       { switch-layout "next"; }
    Mod+Shift+Space { switch-layout "prev"; }

    Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    // The quit action will show a confirmation dialog to avoid accidental exits.
    Ctrl+Shift+Q { quit; }

    // Powers off the monitors. To turn them back on, do any input like
    // moving the mouse or pressing any other key.
    Mod+Shift+P { power-off-monitors; }
    Mod+Tab { focus-workspace-previous; }
}

// Input
input {
    keyboard {
        xkb {
            // layout "us"
            // variant "colemak_dh_ortho"
            options "compose:ralt,caps:escape"
            // model ""
            // rules ""
        }

        repeat-delay 240
        repeat-rate 65
        // track-layout "global"
    }

    mouse {
        // off
        accel-speed 0.0
        accel-profile "flat"
        scroll-factor 1.0
        scroll-method "no-scroll"
        scroll-button 273
        // left-handed
        // middle-emulation
    }

    // disable-power-key-handling
    // warp-mouse-to-focus
    // focus-follows-mouse max-scroll-amount="0%"
    // workspace-auto-back-and-forth
}



prefer-no-csd

screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

hotkey-overlay {
    skip-at-startup
}
// Remember to uncomment the node by removing "/-"!
/-output "eDP-1" {
    // Uncomment this line to disable this output.
    // off

    // Run `niri msg outputs` while inside a niri instance to list all outputs and their modes.
    mode "1920x1080@120.030"

    // Scale is a floating-point number, but at the moment only integer values work.
    scale 1.0

    // Transform allows to rotate the output counter-clockwise, valid values are:
    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
    transform "normal"

    // position x=1280 y=0
}

window-rule {
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}

// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}

window-rule {
    // Border radius 
    clip-to-geometry true
    geometry-corner-radius 10
}
spawn-at-startup "waybar"
spawn-at-startup "swww-daemon"
// spawn-at-startup "swww img ~/.wallpapers/red.jpeg"
spawn-at-startup "swayosd-server"
spawn-at-startup "~/.scripts/swayidle.sh"
spawn-at-startup "swaync -c ~/.config/swaync/config.json -s ~/.config/swaync/style.css"
// Dark theme

layout {
    gaps 14

    // always-center-single-column
    // center-focused-column "on-overflow"
    center-focused-column "never"
    // center-focused-column "always"

    preset-column-widths {
        proportion 0.33333
        proportion 0.5
        proportion 0.66667

        // fixed 1920
    }

    default-column-width { proportion 0.6; }

    // If you leave the brackets empty, the windows themselves will decide their initial width.
    // default-column-width {}
	
    focus-ring {
	off

	width 3

        active-color "#31324400"
	inactive-color "#31324400"

        // active-gradient from="#80c8ff" to="#bbddff" angle=45
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    border {
        // off

        width 1
        active-color "#313244FF"
        inactive-color "#1e1e2eFF"

        active-gradient from="#c4a7e7" to="#9ccfd8" angle=45 in="oklch longer hue"
        // active-gradient from="#ffbb66" to="#ffc880" angle=45 relative-to="workspace-view"
        // active-gradient from="#f00f" to="#0f05" angle=45 in="oklch longer hue"
        inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    struts {
	// left 16
 //        right 16
 //        top 16
 //        bottom 16
    }
}
